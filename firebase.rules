rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // === Public configuration (read-only) ===
    match /config/{docId} {
      allow read: if true;
      allow write: if false;
    }

    // === Public accounts (view only, owners can edit) ===
    match /accounts/{uid} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == uid;
    }

    // === Public username lookup ===
    match /usernames/{username} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // === Leaderboards (public) ===
    match /leaderboards/{testId}/scores/{scoreId} {
      allow read: if true;

      allow create: if 
        request.resource.data.keys().hasOnly(['name', 'score', 'timestamp']) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.name.size() <= 20 &&
        request.resource.data.name.matches('^[a-zA-Z0-9_\\- ]+$') &&
        request.resource.data.score is int &&
        request.resource.data.score >= 0 &&
        request.resource.data.score <= 1000000 &&
        request.time - request.resource.data.timestamp < duration.value(10, 'seconds') &&
        request.resource.data.timestamp - request.time < duration.value(1, 'm');

      allow update, delete: if false;
    }



    // === Logs (non-sensitive telemetry) ===
    match /logs/{logId} {
      allow create: if request.resource.data.keys().hasOnly(['event', 'timestamp']) &&
                    request.resource.data.event is string &&
                    request.resource.data.event.size() <= 200 &&
                    request.time - request.resource.data.timestamp < duration.value(5, 'seconds');
      allow read: if true;
      allow update, delete: if false;
    }

    // === Reports (write-only anonymous feedback) ===
    match /reports/{reportId} {
      allow create: if request.resource.data.keys().hasAll(['message', 'page']) 
                    && request.resource.data.message is string
                    && request.resource.data.page is string
                    && (request.resource.data.email is string || !('email' in request.resource.data))
                    && request.resource.data.message.size() > 0
                    && request.resource.data.message.size() <= 2000;
      allow read, update, delete: if false;
    }

    // === ALL Private User Data (scores, topics, analytics, etc.) ===
    match /users/{userId} {
      // Access to user root doc
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Subcollections (scores, topics, analytics, future additions)
      match /{subCollection}/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
  }
}
